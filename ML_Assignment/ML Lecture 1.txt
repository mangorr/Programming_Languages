% sml
Standard ML of New Jersey (64-bit) v110.94 [built: Fri Nov 01 16:08:14 2019]
- (* This is a comment *)

- (* Basic types: int, real, string *)
- 45   (* Enter a semicolon when you are ready for the system to evaluate your expression *)
= ;
val it = 45 : int
- 32.6 ;
val it = 32.6 : real
- "this is a string" ;
val it = "this is a string" : string

- (* declare a variable using "val" *)
- val x = 99 ;
val x = 99 : int

- (* function definitions use "fun" *)
- fun foo x y = x + y
= ;
val foo = fn : int -> int -> int

- (* function call, just put the arguments after the function name, no parentheses *)
- foo 4 6 ;
val it = 10 : int
- (* using an equational style to define functions, with "pattern matching" *)

- fun fac 0 = 1 
=  |  fac n = n * fac (n-1)    (* parentheses are only needed for association *)
= ;
val fac = fn : int -> int
- fun fac2 n = if n = 0 then 1 else n * fac2 (n-1) ;
val fac2 = fn : int -> int
- fac 5 ;
val it = 120 : int
- fac2 5 ;
val it = 120 : int
- 

- (* Aggregate types: lists and tuples *)
- (* Lists in ML are similar to list in Scheme, but they are homogeneous. That
=    is, all the elements of a list have to be of the same type *)
- [1,2,3,4] ;
val it = [1,2,3,4] : int list
- ["hello", "goodbye"] ;
val it = ["hello","goodbye"] : string list
- [[3.0],[5.2],[8.6]] ;
val it = [[3.0],[5.2],[8.6]] : real list list
- [1, 2.0, 3] ;
stdIn:28.1-28.12 Error: operator and operand do not agree [overload conflict]
  operator domain: real * real list
  operand:         real * [int ty] list
  in expression:
    2.0 :: 3 :: nil
- [[1,2],3] ;
stdIn:1.2-1.11 Error: operator and operand do not agree [overload conflict]
  operator domain: [int ty] list * [int ty] list list
  operand:         [int ty] list * [int ty] list
  in expression:
    (1 :: 2 :: nil) :: 3 :: nil

- (* "cons" is written as :: *)
- 3::[4,5] ;
val it = [3,4,5] : int list
- val L = [4,5,6];
val L = [4,5,6] : int list
- 3::L  ; 
val it = [3,4,5,6] : int list
- (* Of course, :: has not changed it's arguments. ML is a functional language! *)
- L
= ;
val it = [4,5,6] : int list
- val M = 3::L ;
val M = [3,4,5,6] : int list
- M
= ;
val it = [3,4,5,6] : int list

- (* "car" is written as hd, "cdr" is written as tl *)
- hd L ;
val it = 4 : int
- tl L ;
val it = [5,6] : int list

- (* Because of pattern matching, we almost never need to use hd and tl *)
- (* the empty list is written [] *)
- fun sum [] = 0
=  |  sum (y::rest) =  y + sum rest   (* "(y::rest)" is a pattern where y matches the car of the list
=                                        and rest matches the cdr of the list. y and rest are just
=                                        variable names that I chose. *)
= ;
val sum = fn : int list -> int
- sum [2,4,6,8];
val it = 20 : int

- (* append is written as @ *)
- [1,2,3] @ [4,5,6] ;
val it = [1,2,3,4,5,6] : int list

- (* How do we compute the length of a list? *)
- fun length [] = 0
=  |  length (z::zs) = 1 + length zs
= ;
val length = fn : 'a list -> int
- (* The input type 'a list, where 'a pronounced "alpha", says that the input list can be of
=    any type:  int list, real list, int list list, etc.  The 'a matches all types *)
- (* This allows us to call length on infinitely many different types of list *)
- length [1,3,4,5] ;
val it = 4 : int
- length ["one", "two", "three" ] ;
val it = 3 : int
- length [[3.0, 4.0],[5.0,6.0]] ;
val it = 2 : int
- (* length is "polymorphic", meaning it can be called on many different types of inputs and/or
=    return many different types of output *)
- (* In a type, the 'a is "type variable" that can range over all types. A polymorphic function
=    is a function that has a type variable in its type *)
- length ;
val it = fn : 'a list -> int

- (* Returning the i'th element of a list. We'll get a warning due to not handling the empty list case *)
- fun ith 1 (y::ys) = y
=  |  ith i (y::ys) = ith (i-1) ys  ;
stdIn:67.5-68.33 Warning: match nonexhaustive
          (1,y :: ys) => ...
          (i,y :: ys) => ...
  
val ith = fn : int -> 'a list -> 'a
- ith 3 [3.4, 5.6, 7.8, 9.0] ;
val it = 7.8 : real
- 


- (* In ML, functions are "curried". Each function takes one parameter, but may return a function
=    that takes the next parameter, etc. *)
- fun add x y = x + y   (* This is actually a function that takes a single parameter x and returns a 
=                          function that takes a parameter y and computes x + y. *)
= ;
val add = fn : int -> int -> int
- (* Here, int -> int -> int is equivalent to int -> (int -> int) -- the input type is int and the output
=    type is int->int  *)
- val g = add 4 ;  (* add 4 returns a function that takes y and computes 4 + y *)
val g = fn : int -> int
- g 13 ;
val it = 17 : int
- add ;
val it = fn : int -> int -> int
- add 3 4 ;
val it = 7 : int
- (add 3) 4 ;
val it = 7 : int
- add 3 4  ;  (* this means (add 3) 4 *)
val it = 7 : int


- (* The other aggregate data type is a tuple:  represents a cartesian product (x,y,z,...).
=    It's an ordered collection of values of different types *)
- (3.4, "hello", 15) ;
val it = (3.4,"hello",15) : real * string * int
- ([3,4], (5.0, "one"))
= ;
val it = ([3,4],(5.0,"one")) : int list * (real * string)

- (* You typically access the elements of a tuple using patterns *)
- fun addTuple (x,y) = x + y ;  (* "(x,y)" is a pattern that matches a two-element tuple, assigning x
val addTuple = fn : int * int -> int
=                                  the the first element and assigning y to the second element *)

- (* ML has booleans: true, false *)
- true ;
val it = true : bool
- fun bif (x,y,z) = if x then y else z ;
val bif = fn : bool * 'a * 'a -> 'a

- (* In ML a lambda expression is written as fn arg => body *)
- fn x => x + 1  ;
val it = fn : int -> int
- val f = fn x => fn y => x + y  ;
val f = fn : int -> int -> int
- ( * This is exactly the same as writing: fun f x y = x + y *)
- (* ML has a let expression of the form: let definitions in body end *)
- let val a = 20
=     val b = 40
= in a+b
= end ;
val it = 60 : int

- (* ML's let allows sequential definitions and recursive definitions *)
- let val z = 19
=     val w = z * 2
=     fun foo x = if x = w then z else foo (x - 1)
= in foo 50
= end ;
val it = 19 : int

- (* Defining mutually recursive functions using "fun ... and ..."  *)
- fun f x = if x = 0 then 1 else x * g (x-1)
= and g y = if y = 0 then 1 else y * f (y-1) ;
val f = fn : int -> int
val g = fn : int -> int
- g 6 ;
val it = 720 : int

- (* Note: In ML, the boolean operators for 'and' and 'or' are written "andalso" and "orelse" *)
- (3 < 4) andalso ((5 > 6) orelse (7 < 8)) ;
val it = true : bool

- (* ML has the map function *)
- map (fn x => x * 2) [1,2,3,4,5] ;
val it = [2,4,6,8,10] : int list
- (* What is the type of map? *)
- map ;
val it = fn : ('a -> 'b) -> 'a list -> 'b list

- (* Here's how to write map *)
- fun map f [] = []
=  |  map f (x::xs) = (f x) :: map f xs ;
val map = fn : ('a -> 'b) -> 'a list -> 'b list
- map (fn x => x * 2) [1,2,3,4,5] ;
val it = [2,4,6,8,10] : int list

- (* Here's another higher order function -- what is its type? *)
- fun compose f g = fn x => f (g x) ;
val compose = fn : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b

(* See the handwritten notes on type inference *)
