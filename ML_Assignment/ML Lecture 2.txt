% sml
Standard ML of New Jersey (64-bit) v110.94 [built: Fri Nov 01 16:08:14 2019]
- (* defining new types in ML: "datatype" *)
- (* A type is a set of values, along with operations on those values *)
- 
- (* A type can be defined by enumerating the elements of the set *)
- 
- datatype stoplight = red | green | yellow ;
datatype stoplight = green | red | yellow
- yellow ;
val it = yellow : stoplight
- fun f x = if x = 0 then yellow else red ;
val f = fn : int -> stoplight
- fun drive green = "Go"
=  |  drive red = "Stop"
=  |  drive yellow = "Go faster" ;
val drive = fn : stoplight -> string
- drive green ;
val it = "Go" : string
- 
- 
- 
- (* Datatypes can include other types *)
- 
- datatype tree = leaf of int | node of tree * tree ;
datatype tree = leaf of int | node of tree * tree
- 
- 
- leaf 5 ;
val it = leaf 5 : tree
- node (leaf 6, leaf 7) ;
val it = node (leaf 6,leaf 7) : tree
- 
- val myTree = node (node (leaf 7, leaf 8), node (leaf 9, leaf 10)) ;
val myTree = node (node (leaf 7,leaf 8),node (leaf 9,leaf 10)) : tree
- 
- (* Fringe function: returns a list of the labels at the leaves *)
- 
- fun fringe (leaf x) = [x]
=  |  fringe (node (left, right)) = fringe left @ fringe right ;
val fringe = fn : tree -> int list
- 
- fringe myTree ;
val it = [7,8,9,10] : int list
- 
- (* Suppose you wanted to define multiple tree types that are identical
=    except the labels at the leaves are of different types.
=    Use a polymorphic datatype *)
- 
- datatype 'a tree = leaf of 'a | node of 'a tree * 'a tree  ;
datatype 'a tree = leaf of 'a | node of 'a tree * 'a tree
- leaf 3 ;
val it = leaf 3 : int tree
- node (leaf "hello", leaf "goodbye" ) ;
val it = node (leaf "hello",leaf "goodbye") : string tree

- node (leaf 3, leaf [3]) ;  (* This will be an error *)
stdIn:44.1-44.24 Error: operator and operand do not agree [overload conflict]
  operator domain: [int ty] tree * [int ty] tree
  operand:         [int ty] tree * [int ty] list tree
  in expression:
    node (leaf 3,leaf (3 :: nil))
- 
- 
- (* ML allows you to define your own infix operators.  All infix operators
=    must take a tuple of two values as the parameter. *)
- 
- (* defining a new operator: *)
- infix ++ ;
infix ++
- (* defining a function named ++ *)
- fun a ++ b = a*2 + b  ;
val ++ = fn : int * int -> int
- 3 ++ 4 ;
val it = 10 : int
- 
- (* Infix operators can be used as a parameter to a function *)
- 
- fun f (op ++) a b = a ++ b ++ b ;
val f = fn : ('a * 'b -> 'a) -> 'a -> 'b -> 'a
- 
- (* When calling f, you have to pass in an operator or a function corresponding
=    to ++ *)
- 
- f (op @) [1,2,3] [4,5]  ;
val it = [1,2,3,4,5,4,5] : int list
- f (fn (x,y) => x*2 + y) 3 4 ;
val it = 24 : int
- infix foo ;
infix foo
- fun g (op foo) a b = a foo b ;
val g = fn : ('a * 'b -> 'c) -> 'a -> 'b -> 'c
- g (op +) 3 4 ;
val it = 7 : int

